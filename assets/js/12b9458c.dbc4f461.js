"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5063],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return u}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),d=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=d(a),u=r,h=m["".concat(l,".").concat(u)]||m[u]||s[u]||o;return a?n.createElement(h,c(c({ref:t},p),{},{components:a})):n.createElement(h,c({ref:t},p))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,c=new Array(o);c[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var d=2;d<o;d++)c[d]=a[d];return n.createElement.apply(null,c)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},251:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return p},default:function(){return m}});var n=a(7462),r=a(3366),o=(a(7294),a(3905)),c=["components"],i={id:"Read_data_from_cache",title:"Read data from cache"},l=void 0,d={unversionedId:"Cache_Library_User_Guides/Read_data_from_cache",id:"Cache_Library_User_Guides/Read_data_from_cache",isDocsHomePage:!1,title:"Read data from cache",description:"An item written to cache by cachelib is associated with a key. To read the item from cache, call the find() method (defined in allocator/CacheAllocator.h) with the key to look up the item:",source:"@site/docs/Cache_Library_User_Guides/Read_data_from_cache.md",sourceDirName:"Cache_Library_User_Guides",slug:"/Cache_Library_User_Guides/Read_data_from_cache",permalink:"/docs/Cache_Library_User_Guides/Read_data_from_cache",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/Cache_Library_User_Guides/Read_data_from_cache.md",tags:[],version:"current",frontMatter:{id:"Read_data_from_cache",title:"Read data from cache"},sidebar:"userguideSidebar",previous:{title:"Write data to cache",permalink:"/docs/Cache_Library_User_Guides/Write_data_to_cache"},next:{title:"Remove data from cache",permalink:"/docs/Cache_Library_User_Guides/Remove_data_from_cache"}},p=[],s={toc:p};function m(e){var t=e.components,a=(0,r.Z)(e,c);return(0,o.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"An item written to cache by cachelib is associated with a key. To read the item from cache, call the ",(0,o.kt)("inlineCode",{parentName:"p"},"find()")," method (defined in allocator/CacheAllocator.h) with the key to look up the item:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"ItemHandle find(Key key);\n")),(0,o.kt)("p",null,"For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'auto item_handle = cache->find("key1");\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"find()")," method returns an ",(0,o.kt)("inlineCode",{parentName:"p"},"ItemHandle")," that you use to get the memory location of the data:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"void* pdata = item_handle->getMemory();\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"getMemory()")," method returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"void*")," pointer. Use ",(0,o.kt)("inlineCode",{parentName:"p"},"reinterpret_cast<T*>")," to cast it to a pointer of a specific type ",(0,o.kt)("inlineCode",{parentName:"p"},"T"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"auto data = reinterpret_cast<T*>(pdata);\n")),(0,o.kt)("p",null,"For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"auto item_handle = cache->find(\"key1\");\nif (item_handle) {\n  auto data = reinterpret_cast<const char*>(item_handle->getMemory());\n  std::cout << data << '\\n';\n}\n")),(0,o.kt)("p",null,"You can also use iterators to read all the items written to the cache. See ",(0,o.kt)("a",{parentName:"p",href:"Visit_data_in_cache"},"Visit data in cache"),"."),(0,o.kt)("p",null,"To read data from chained items, start from the parent ",(0,o.kt)("inlineCode",{parentName:"p"},"ItemHandle"),", for example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"auto chained_allocs = cache->viewAsChainedAllocs(parent_item_handle);\nfor (const auto& c : chained_allocs.getChain()) {\n  auto data = reinterpret_cast<const char*>(c.getMemory());\n  std::cout << data << '\\n';\n}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Refer to ",(0,o.kt)("a",{parentName:"strong",href:"chained_items"},"Chained items")," to see how chained items are ordered in cache.")),(0,o.kt)("p",null,"To get the ",(0,o.kt)("em",{parentName:"p"},"n"),"th item in the chain, call the ",(0,o.kt)("inlineCode",{parentName:"p"},"getNthInChain()")," method via ",(0,o.kt)("inlineCode",{parentName:"p"},"CacheChainedAllocs"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"auto chained_allocs = cache->viewAsChainedAllocs(parent_item_handle);\nauto item = chained_allocs.getNthInChain(1);\nif (item) {\n  std::cout << reinterpret_cast<const char*>(item->getMemory()) << '\\n';\n}\n")),(0,o.kt)("p",null,"Note that the first item has index ",(0,o.kt)("inlineCode",{parentName:"p"},"0"),", second item has index ",(0,o.kt)("inlineCode",{parentName:"p"},"1"),", and so on."))}m.isMDXComponent=!0}}]);